{
  "address": "0xAC5B1B8d92Bbc6107B16B6260d8Ad148ECD3Bc20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wNFTAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftsForRenting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pricePerDay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerDay",
          "type": "uint256"
        }
      ],
      "name": "offerForRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "rent",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentedNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rentStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rentDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerDay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "setWNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8f867de30c320bc5bdfadace78e41f6dcf27490cd5418f305998857d76b75dc",
  "receipt": {
    "to": null,
    "from": "0x535E1C6E860Fd50A0139F01a387eB73d7920F668",
    "contractAddress": "0xAC5B1B8d92Bbc6107B16B6260d8Ad148ECD3Bc20",
    "transactionIndex": 4,
    "gasUsed": "1410995",
    "logsBloom": "0x
    "blockHash": "0x35ae086cf5a4a296fea40a72bd22fd1861bf214d71b5d53f34d489370ef2a4cf",
    "transactionHash": "0xc8f867de30c320bc5bdfadace78e41f6dcf27490cd5418f305998857d76b75dc",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23947636,
        "transactionHash": "0xc8f867de30c320bc5bdfadace78e41f6dcf27490cd5418f305998857d76b75dc",
        "address": "0xAC5B1B8d92Bbc6107B16B6260d8Ad148ECD3Bc20",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000535e1c6e860fd50a0139f01a387eb73d7920f668"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x35ae086cf5a4a296fea40a72bd22fd1861bf214d71b5d53f34d489370ef2a4cf"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 23947636,
        "transactionHash": "0xc8f867de30c320bc5bdfadace78e41f6dcf27490cd5418f305998857d76b75dc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000535e1c6e860fd50a0139f01a387eb73d7920f668",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a0695bed63e680000000000000000000000000000000000000000000000000ebe588cc77d44760000000000000000000000000000000000000000000004cce4c803932ab8dfba0000000000000000000000000000000000000000000000000eb451f708a7060e0000000000000000000000000000000000000000000004cce4d20a28e98f1e22",
        "logIndex": 12,
        "blockHash": "0x35ae086cf5a4a296fea40a72bd22fd1861bf214d71b5d53f34d489370ef2a4cf"
      }
    ],
    "blockNumber": 23947636,
    "cumulativeGasUsed": "1878748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xafE5e689a9dBA871B134C22264dc30be39920321"
  ],
  "numDeployments": 1,
  "solcInputHash": "cbc5170b5040e36fa727a14ae49a901a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsForRenting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerDay\",\"type\":\"uint256\"}],\"name\":\"offerForRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"rent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setWNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rent(uint256,uint256)\":{\"params\":{\"_duration\":\"Rent duration in seconds\",\"_tokenId\":\"Token which is going tobe rented\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renfter.sol\":\"Renfter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc17dae2baabdf6f414ee129c3f07324309aaa8ae63297ab55cada28a6969a81b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IwNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n\\n// TODO:\\n// - Change this to be ERC1155 instead of ERC721\\ninterface IwNFT is IERC721 {\\n  struct originalTokenData {\\n    address superOwner;\\n    address contractAddress;\\n    uint256 externalTokenId;\\n  }\\n  \\n  // TODO: we should maybe check here also if tolen exists, and if _to is the owner before miniting\\n  /// @notice Mints new wrapped NFT\\n  /// @param _to Address that will own the token after minitng\\n  /// @param _contractAddress Address of the original contract whose token is being wrapped\\n  /// @param _tokenId Id of the token from origina contract that is going to be wrapped\\n  function mint(address _to, address _contractAddress, uint256 _tokenId) external;\\n\\n  /// @notice Checks for type and returns original (non-wrapped) token URI\\n  /// @param _tokenId Wrapped token ID to retrieve original URI for. URI is return from original token contract\\n  function tokenURI(uint256 _tokenId) external view returns(string memory);\\n\\n  /// @notice Checks beneficiary who can use token currently\\n  /// @param _contractAddress Original token contract address\\n  /// @param _tokenId Original token ID\\n  function getBeneficiary(address _contractAddress, uint _tokenId) external view returns(address);\\n\\n  /// @notice Returns data about original tokenCounter\\n  /// @param _tokenId Wrapped token ID\\n  function getOriginalTokenData(uint _tokenId) external view returns(originalTokenData memory);\\n\\n  // TODO: return original contract address, token id and superowner so we can use it in Refter contract\\n  // during unwrap and send it back to original user\\n  function burn(uint _tokenId) external returns(address, address, uint256);\\n}\\n\",\"keccak256\":\"0xa27a9c34a8afc4c846a93dca40b9f04d4091198e539106124ddf794b050762fd\",\"license\":\"Unlicense\"},\"contracts/Renfter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IwNFT.sol\\\";\\n\\ncontract Renfter is ERC1155Holder, ERC721Holder, Ownable {\\n  IwNFT wNFT;\\n\\n  struct RentedNFT {\\n    uint rentStartTimestamp;\\n    uint rentDuration;\\n    uint pricePerDay;\\n  }\\n\\n  struct NFTForRenting {\\n    uint pricePerDay;\\n  }\\n\\n  uint rentedNFTsCount;\\n  uint nftsForRentingCount;\\n  // wNFTId => RentedNFT\\n  mapping (uint256 => RentedNFT) public rentedNFTs;\\n  mapping (uint256 => NFTForRenting) public nftsForRenting;\\n\\n  constructor(address _wNFTAddress) {\\n    wNFT = IwNFT(_wNFTAddress);\\n  }\\n\\n  function setWNFT(address _contractAddress) public onlyOwner() {\\n    wNFT = IwNFT(_contractAddress);\\n  }\\n\\n  // // TODO: Don't have time for this\\n  // function getAllRentedNFTS() public view returns(uint256[] memory rentedNFTsIds) {}\\n\\n  //  // TODO: Don't have time for this\\n  // function getAllNFTSForRenting() public view returns(uint256[] memory rentedNFTsIds) {}\\n\\n  function wrap(address _contractAddress, uint _tokenId) external returns(bool) {\\n    bool supportsERC721 = ERC165Checker.supportsInterface(_contractAddress, type(IERC721).interfaceId);\\n    bool supportsERC1155 = ERC165Checker.supportsInterface(_contractAddress, type(IERC1155).interfaceId);\\n\\n    require(supportsERC721 || supportsERC1155, \\\"Invalid contract type\\\");\\n\\n    if (supportsERC721) {\\n      require(IERC721(_contractAddress).ownerOf(_tokenId) == msg.sender, \\\"Not an owner\\\");\\n      require(IERC721(_contractAddress).isApprovedForAll(msg.sender, address(this)), \\\"Approve is missing\\\");\\n\\n      IERC721(_contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\\n      wNFT.mint(msg.sender, _contractAddress, _tokenId);\\n      return true;\\n    }\\n\\n    require(IERC1155(_contractAddress).balanceOf(msg.sender, _tokenId) > 0, \\\"Not an owner\\\");\\n    require(IERC1155(_contractAddress).isApprovedForAll(msg.sender, address(this)), \\\"Approve is missing\\\");\\n\\n    IERC1155(_contractAddress).safeTransferFrom(msg.sender, address(this), _tokenId, 1, \\\"\\\");\\n\\n    wNFT.mint(msg.sender, _contractAddress, _tokenId);\\n    return true;\\n  }\\n\\n  // Brun wrapped token, return original to real owner\\n  // Check if is rented before that \\n  function unwrap(uint256 _tokenId) public returns(bool) {\\n    IwNFT.originalTokenData memory originalTokenData = wNFT.getOriginalTokenData(_tokenId);\\n    require(originalTokenData.superOwner == msg.sender, \\\"Not allowed\\\");\\n\\n    RentedNFT memory rentedNFT = rentedNFTs[_tokenId];\\n    require(\\n      rentedNFT.rentStartTimestamp + rentedNFT.rentDuration < block.timestamp,\\n      \\\"Rent duration period isn't over\\\"\\n    );\\n\\n    delete rentedNFTs[_tokenId];\\n    delete nftsForRenting[_tokenId];\\n\\n    (address superOwner, address contractAddress, uint tokenId) = wNFT.burn(_tokenId);\\n\\n    bool supportsERC721 = ERC165Checker.supportsInterface(contractAddress, type(IERC721).interfaceId);\\n\\n    if (supportsERC721) {\\n      IERC721(contractAddress).transferFrom(address(this), superOwner, tokenId);\\n      return true;\\n    }\\n\\n    IERC1155(contractAddress).safeTransferFrom(address(this), superOwner, tokenId, 1, \\\"\\\");\\n    return true;\\n  }\\n\\n  function offerForRent(uint _tokenId, uint _pricePerDay) public {\\n    require(rentedNFTs[_tokenId].pricePerDay == 0, \\\"Already rented\\\");\\n    require(nftsForRenting[_tokenId].pricePerDay == 0, \\\"Already offered\\\");\\n\\n    IwNFT.originalTokenData memory originalTokenData = wNFT.getOriginalTokenData(_tokenId);\\n    require(originalTokenData.superOwner == msg.sender, \\\"Not allowed\\\");\\n    require(_pricePerDay > 0, \\\"Invalid price value\\\");\\n\\n    nftsForRenting[_tokenId].pricePerDay = _pricePerDay;\\n  }\\n\\n  /// @param _tokenId Token which is going tobe rented\\n  /// @param _duration Rent duration in seconds\\n  function rent(uint _tokenId, uint _duration) public payable {\\n    uint priceForRent = nftsForRenting[_tokenId].pricePerDay;\\n    uint durationInDays = _duration / 60 / 60 / 24;\\n\\n    require(rentedNFTs[_tokenId].pricePerDay == 0, \\\"Already rented\\\");\\n    require(priceForRent > 0, \\\"Not renting\\\");\\n    require(_duration > 1 days, \\\"Min one day to rent\\\");\\n    require(msg.value >= durationInDays * priceForRent, \\\"Not enough funds\\\");\\n\\n    rentedNFTs[_tokenId].rentStartTimestamp = block.timestamp;\\n    rentedNFTs[_tokenId].rentDuration = _duration;\\n    rentedNFTs[_tokenId].pricePerDay = priceForRent;\\n\\n    delete nftsForRenting[_tokenId];\\n\\n    address currentOwner = wNFT.ownerOf(_tokenId);\\n    wNFT.transferFrom(currentOwner, msg.sender, _tokenId);\\n  }\\n}\",\"keccak256\":\"0xcce228e51e0ef383ae51faf99b720ceae93a8cf37562f0256350c1edc27acf8c\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161189738038061189783398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6117ab806100ec6000396000f3fe6080604052600436106100dd5760003560e01c8063bc197c811161007f578063de0e9a3e11610059578063de0e9a3e14610290578063e52a08d9146102b0578063f23a6e61146102eb578063f2fde38b1461031757600080fd5b8063bc197c81146101ed578063bf376c7a14610219578063d20bdec21461023957600080fd5b8063715018a6116100bb578063715018a61461017d578063783a112b146101925780638da5cb5b146101a5578063a371b4a4146101cd57600080fd5b806301ffc9a7146100e2578063150b7a0214610117578063270be7011461015b575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046111b7565b610337565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b506101426101323660046112ad565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161010e565b34801561016757600080fd5b5061017b610176366004611319565b61036e565b005b34801561018957600080fd5b5061017b610522565b61017b6101a0366004611319565b610558565b3480156101b157600080fd5b506000546040516001600160a01b03909116815260200161010e565b3480156101d957600080fd5b5061017b6101e836600461133b565b6107b4565b3480156101f957600080fd5b506101426102083660046113d8565b63bc197c8160e01b95945050505050565b34801561022557600080fd5b50610102610234366004611486565b610800565b34801561024557600080fd5b506102756102543660046114b2565b60046020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161010e565b34801561029c57600080fd5b506101026102ab3660046114b2565b610ce1565b3480156102bc57600080fd5b506102dd6102cb3660046114b2565b60056020526000908152604090205481565b60405190815260200161010e565b3480156102f757600080fd5b506101426103063660046114cb565b63f23a6e6160e01b95945050505050565b34801561032357600080fd5b5061017b61033236600461133b565b610f8d565b60006001600160e01b03198216630271189760e51b148061036857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260046020526040902060020154156103c35760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481c995b9d195960921b60448201526064015b60405180910390fd5b600082815260056020526040902054156104115760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481bd999995c9959608a1b60448201526064016103ba565b60015460405163e419028d60e01b8152600481018490526000916001600160a01b03169063e419028d90602401606060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190611534565b80519091506001600160a01b031633146104c95760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016103ba565b6000821161050f5760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642070726963652076616c756560681b60448201526064016103ba565b5060009182526005602052604090912055565b6000546001600160a01b0316331461054c5760405162461bcd60e51b81526004016103ba9061159f565b6105566000611028565b565b600082815260056020526040812054906018603c61057681866115ea565b61058091906115ea565b61058a91906115ea565b600085815260046020526040902060020154909150156105dd5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481c995b9d195960921b60448201526064016103ba565b6000821161061b5760405162461bcd60e51b815260206004820152600b60248201526a4e6f742072656e74696e6760a81b60448201526064016103ba565b6201518083116106635760405162461bcd60e51b8152602060048201526013602482015272135a5b881bdb994819185e481d1bc81c995b9d606a1b60448201526064016103ba565b61066d828261160c565b3410156106af5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016103ba565b6000848152600460208181526040808420428155600180820189905560029091018790556005909252808420849055905490516331a9108f60e11b81529182018790526001600160a01b031690636352211e90602401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610746919061162b565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061077b90849033908a90600401611648565b600060405180830381600087803b15801561079557600080fd5b505af11580156107a9573d6000803e3d6000fd5b505050505050505050565b6000546001600160a01b031633146107de5760405162461bcd60e51b81526004016103ba9061159f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080610814846380ac58cd60e01b611078565b9050600061082985636cdb3d1360e11b611078565b905081806108345750805b6108785760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420636f6e7472616374207479706560581b60448201526064016103ba565b8115610ab0576040516331a9108f60e11b81526004810185905233906001600160a01b03871690636352211e90602401602060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061162b565b6001600160a01b03161461092e5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71037bbb732b960a11b60448201526064016103ba565b60405163e985e9c560e01b81523360048201523060248201526001600160a01b0386169063e985e9c590604401602060405180830381865afa158015610978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099c919061166c565b6109dd5760405162461bcd60e51b8152602060048201526012602482015271417070726f7665206973206d697373696e6760701b60448201526064016103ba565b604051632142170760e11b81526001600160a01b038616906342842e0e90610a0d90339030908990600401611648565b600060405180830381600087803b158015610a2757600080fd5b505af1158015610a3b573d6000803e3d6000fd5b5050600154604051636361ddf360e11b81526001600160a01b03909116925063c6c3bbe69150610a7390339089908990600401611648565b600060405180830381600087803b158015610a8d57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b50505050600192505050610368565b604051627eeac760e11b8152336004820152602481018590526000906001600160a01b0387169062fdd58e90604401602060405180830381865afa158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b20919061168e565b11610b5c5760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71037bbb732b960a11b60448201526064016103ba565b60405163e985e9c560e01b81523360048201523060248201526001600160a01b0386169063e985e9c590604401602060405180830381865afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca919061166c565b610c0b5760405162461bcd60e51b8152602060048201526012602482015271417070726f7665206973206d697373696e6760701b60448201526064016103ba565b604051637921219560e11b81526001600160a01b0386169063f242432a90610c3e903390309089906001906004016116a7565b600060405180830381600087803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b5050600154604051636361ddf360e11b81526001600160a01b03909116925063c6c3bbe69150610ca490339089908990600401611648565b600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b50600198975050505050505050565b60015460405163e419028d60e01b81526004810183905260009182916001600160a01b039091169063e419028d90602401606060405180830381865afa158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d539190611534565b80519091506001600160a01b03163314610d9d5760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016103ba565b600083815260046020908152604091829020825160608101845281548082526001830154938201849052600290920154938101939093524291610ddf916116df565b10610e2c5760405162461bcd60e51b815260206004820152601f60248201527f52656e74206475726174696f6e20706572696f642069736e2774206f7665720060448201526064016103ba565b600084815260046020818152604080842084815560018082018690556002909101859055600590925280842084905590549051630852cd8d60e31b8152918201879052829182916001600160a01b0316906342966c68906024016060604051808303816000875af1158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116f7565b9250925092506000610ee2836380ac58cd60e01b611078565b90508015610f5a576040516323b872dd60e01b81526001600160a01b038416906323b872dd90610f1a90309088908790600401611648565b600060405180830381600087803b158015610f3457600080fd5b505af1158015610f48573d6000803e3d6000fd5b5060019b9a5050505050505050505050565b604051637921219560e11b81526001600160a01b0384169063f242432a90610f1a903090889087906001906004016116a7565b6000546001600160a01b03163314610fb75760405162461bcd60e51b81526004016103ba9061159f565b6001600160a01b03811661101c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ba565b61102581611028565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006110838361109b565b8015611094575061109483836110ce565b9392505050565b60006110ae826301ffc9a760e01b6110ce565b801561036857506110c7826001600160e01b03196110ce565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061113590869061173a565b6000604051808303818686fa925050503d8060008114611171576040519150601f19603f3d011682016040523d82523d6000602084013e611176565b606091505b50915091506020815110156111915760009350505050610368565b8180156111ad5750808060200190518101906111ad919061166c565b9695505050505050565b6000602082840312156111c957600080fd5b81356001600160e01b03198116811461109457600080fd5b6001600160a01b038116811461102557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611235576112356111f6565b604052919050565b600082601f83011261124e57600080fd5b813567ffffffffffffffff811115611268576112686111f6565b61127b601f8201601f191660200161120c565b81815284602083860101111561129057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156112c357600080fd5b84356112ce816111e1565b935060208501356112de816111e1565b925060408501359150606085013567ffffffffffffffff81111561130157600080fd5b61130d8782880161123d565b91505092959194509250565b6000806040838503121561132c57600080fd5b50508035926020909101359150565b60006020828403121561134d57600080fd5b8135611094816111e1565b600082601f83011261136957600080fd5b8135602067ffffffffffffffff821115611385576113856111f6565b8160051b61139482820161120c565b92835284810182019282810190878511156113ae57600080fd5b83870192505b848310156113cd578235825291830191908301906113b4565b979650505050505050565b600080600080600060a086880312156113f057600080fd5b85356113fb816111e1565b9450602086013561140b816111e1565b9350604086013567ffffffffffffffff8082111561142857600080fd5b61143489838a01611358565b9450606088013591508082111561144a57600080fd5b61145689838a01611358565b9350608088013591508082111561146c57600080fd5b506114798882890161123d565b9150509295509295909350565b6000806040838503121561149957600080fd5b82356114a4816111e1565b946020939093013593505050565b6000602082840312156114c457600080fd5b5035919050565b600080600080600060a086880312156114e357600080fd5b85356114ee816111e1565b945060208601356114fe816111e1565b93506040860135925060608601359150608086013567ffffffffffffffff81111561152857600080fd5b6114798882890161123d565b60006060828403121561154657600080fd5b6040516060810181811067ffffffffffffffff82111715611569576115696111f6565b6040528251611577816111e1565b81526020830151611587816111e1565b60208201526040928301519281019290925250919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008261160757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611626576116266115d4565b500290565b60006020828403121561163d57600080fd5b8151611094816111e1565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561167e57600080fd5b8151801515811461109457600080fd5b6000602082840312156116a057600080fd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600082198211156116f2576116f26115d4565b500190565b60008060006060848603121561170c57600080fd5b8351611717816111e1565b6020850151909350611728816111e1565b80925050604084015190509250925092565b6000825160005b8181101561175b5760208186018101518583015201611741565b8181111561176a576000828501525b50919091019291505056fea2646970667358221220080bf8be5722c5bdb605caabab8cba75703884f892c4f85cccaf6cb7cc064f1164736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rent(uint256,uint256)": {
        "params": {
          "_duration": "Rent duration in seconds",
          "_tokenId": "Token which is going tobe rented"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4608,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "wNFT",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IwNFT)4590"
      },
      {
        "astId": 4620,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "rentedNFTsCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4622,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "nftsForRentingCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4627,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "rentedNFTs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(RentedNFT)4615_storage)"
      },
      {
        "astId": 4632,
        "contract": "contracts/Renfter.sol:Renfter",
        "label": "nftsForRenting",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(NFTForRenting)4618_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IwNFT)4590": {
        "encoding": "inplace",
        "label": "contract IwNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(NFTForRenting)4618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Renfter.NFTForRenting)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTForRenting)4618_storage"
      },
      "t_mapping(t_uint256,t_struct(RentedNFT)4615_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Renfter.RentedNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(RentedNFT)4615_storage"
      },
      "t_struct(NFTForRenting)4618_storage": {
        "encoding": "inplace",
        "label": "struct Renfter.NFTForRenting",
        "members": [
          {
            "astId": 4617,
            "contract": "contracts/Renfter.sol:Renfter",
            "label": "pricePerDay",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RentedNFT)4615_storage": {
        "encoding": "inplace",
        "label": "struct Renfter.RentedNFT",
        "members": [
          {
            "astId": 4610,
            "contract": "contracts/Renfter.sol:Renfter",
            "label": "rentStartTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4612,
            "contract": "contracts/Renfter.sol:Renfter",
            "label": "rentDuration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4614,
            "contract": "contracts/Renfter.sol:Renfter",
            "label": "pricePerDay",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}